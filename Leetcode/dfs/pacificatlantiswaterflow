class Solution {
public:
    void dfs(vector<vector<bool>>& vis,int i,int j,int prev,vector<vector<int>>& heights)
    {
        if(i<0||j<0||i>=heights.size()||j>=heights[0].size()||vis[i][j]||heights[i][j]<prev)
            return ;
        vis[i][j]=true;
        
        dfs(vis,i+1,j,heights[i][j],heights);
        dfs(vis,i,j-1,heights[i][j],heights);
        dfs(vis,i-1,j,heights[i][j],heights);
        dfs(vis,i,j+1,heights[i][j],heights);  
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        
        int n=heights.size();
        int m=heights[0].size();
       
        vector<vector<bool>> pacific(n,vector<bool>(m,false));
        vector<vector<bool>> atlantis(n,vector<bool>(m,false));
        
        for(int i=0;i<n;i++)
        {
           dfs(pacific,i,0,heights[i][0],heights);  
        }
        for(int j=0;j<m;j++)
        {
           dfs(pacific,0,j,heights[0][j],heights);  
        }
        for(int i=0;i<n;i++)
        {
           dfs(atlantis,i,m-1,heights[i][m-1],heights);  
        }
        for(int j=0;j<m;j++)
        {
           dfs(atlantis,n-1,j,heights[n-1][j],heights);  
        }
        vector<vector<int>> res;
         for(int i=0;i<n;i++)
        {
              for(int j=0;j<m;j++)
              {
                 if(pacific[i][j] && atlantis[i][j]) 
                     res.push_back({i,j});
               }
        }

        return res;
    }
};
