class Solution {
public:
    bool isValid(int i,int j,vector<vector<char>>& board)
    {
          if(i>=board.size()||j>=board[0].size()||i<0||j<0)  return false;
          return true;
    }
   bool dfs(int i,int j,vector<vector<char>>& board, string word,int k,vector<vector<bool>> &vis)
    {   
        
        if(!isValid(i,j,board)||i<0||j<0||vis[i][j]==true||board[i][j]!=word[k])
            return false;
       if(k==word.size()-1)
            return true;
         vis[i][j]=true;  
        
          bool res= dfs(i+1,j,board,word,k+1,vis)|| dfs(i-1,j,board,word,k+1,vis)|| dfs(i,j+1,board,word,k+1,vis)|| dfs(i,j-1,board,word,k+1,vis);
       vis[i][j]=false;
        
       return res;
    }
    bool exist(vector<vector<char>>& board, string word) {
        
    int n=board.size();
    int m=board[0].size();
     vector<vector<bool>> vis(n+1,vector<bool>(m+1,false));
     for(int i=0;i<n;i++)
     {
        for(int j=0;j<m;j++)
        {
            if(board[i][j]==word[0])
            {
                if(dfs(i,j,board,word,0,vis)) 
                   return true;
            } 
        }
     } 
                     return false;
    }
};
