/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
/*void helper(TreeNode* root,vector<int> arr,vector<vector<int>> &ans)
{
    if(!root)
        return;
    arr.push_back(root->val);
    if(root->left==NULL && root->right==NULL)
    {
       ans.push_back(arr);
       return;
    }
    helper(root->left,arr,ans);
    helper(root->right,arr,ans);
}
*/
    int cnt=0;
    void trav(TreeNode* root,int maxi)
    {
        if(!root)
            return;
        if(root->val>=maxi)
            cnt++;
        maxi=max(maxi,root->val);
        trav(root->left,maxi);
        trav(root->right,maxi);
        
    }
    int goodNodes(TreeNode* root) {
        
   /* if(!root)
        return 0;
    vector<vector<int>> ans;
    vector<int> arr;
    helper(root,arr,ans);
    int cnt=1;
    for(int i=0;i<ans.size();i++)
    {   
        int maxi=ans[i][0];
        for(int j=1;j<ans[i].size();j++)
        {   
            if(ans[i][j]>=maxi)
                cnt++;
            maxi=max(maxi,ans[i][j]);
            }
        }
        return cnt;
        */
        if(!root)
            return 0;
        trav(root,root->val);
        return cnt;
    }
};
